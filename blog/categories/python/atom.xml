<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Arrow of Code]]></title>
  <link href="http://wafflespeanut.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://wafflespeanut.github.io/"/>
  <updated>2015-07-09T09:57:08+05:30</updated>
  <id>http://wafflespeanut.github.io/</id>
  <author>
    <name><![CDATA[Ravi Shankar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pythonist getting Rusty these days... (Part 2)]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/07/08/a-pythonist-getting-rusty-these-days-dot-dot-dot-part-2/"/>
    <updated>2015-07-08T18:17:58+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/07/08/a-pythonist-getting-rusty-these-days-dot-dot-dot-part-2</id>
    <content type="html"><![CDATA[<p>Last time, I talked about <a href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot">my experience with Rust as a newbie</a>. Today, I&rsquo;ll try to explain the hard time I had with the <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a>. Well, I shouldn&rsquo;t have gone into it, but I needed that for communication with Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>FFI was <em>hard</em>, because I can&rsquo;t quite guess what happens along the way. Errors don&rsquo;t mean much, which means that I can get the results only during runtime (and then figure out whether it&rsquo;s the cake I want or not). Then, there&rsquo;s this <em>interesting</em> problem of memory safety. Rust is specifically designed to be memory safe, but most of the other languages aren&rsquo;t (especially C, and so is its descendant, &ldquo;Python&rdquo;). They both can only speak &ldquo;C&rdquo; in their low level. So, Rust <em>has</em> to speak C if it wants to communicate with Python.</p>

<!-- more -->


<p>This means that there&rsquo;s no sending a list from Python and getting it in Rust. Both have entirely different data structures. And, we don&rsquo;t have to say about Rust - its clockworks are <em>crazier</em> than C or Python. But, thanks to Rust&rsquo;s &ldquo;libc&rdquo; and Python&rsquo;s &ldquo;ctypes&rdquo; libraries, which enable both the languages to communicate in C.</p>

<h1>Establishing the Rust-Python FFI</h1>

<p>My script was a bit <em>cranky</em>. Each time, it has a specific list of files (with MD5-hashed filenames). So, I decided to send the necessary file paths as an array of strings. Things got somewhat complicated here. To send an array, I should create one using the <code>ctypes</code>, grab its address (a pointer) and send it along with its length.</p>

<p>In Rust, I should already have a setup like this&hellip;</p>

<pre><code class="rust">#![feature(libc)]       // the thing is pretty useful, but unstable
use std::slice;
use libc::{size_t, c_char};

#[no_mangle]            // Please don't mangle the names, my dear Rust!
pub extern fn get_stuff(array: *const *const c_char, length: size_t) {
    let array = unsafe { slice::from_raw_parts(array, length as usize) };
    // do some stuff with the array
}
</code></pre>

<p>&hellip; so that, I could link it to Python like this,</p>

<pre><code class="python">import ctypes

lib = ctypes.cdll.LoadLibrary("test.so")
list_to_send = ['blah', 'blah', 'blah']
lib.get_stuff.argtypes = (ctypes.POINTER(ctypes.c_char_p), ctypes.c_size_t)

c_array = (ctypes.c_char_p * len(list_to_send))(*list_to_send)  # send the array
lib.get_stuff(c_array, len(list_to_send))   # sending stuff to our Rust library
</code></pre>

<p>Python&rsquo;s side is pretty much self-explanatory - just take a list, declare the argument types, form an array from the list and send its reference, along with its length. But, there are some interesting things going on at Rust&rsquo;s side. I&rsquo;m sure you&rsquo;re aware of <code>pub extern</code>, which allows a function to be publicly called and especially from &ldquo;C&rdquo;.</p>

<p>Now, there&rsquo;s an <code>unsafe</code>. Like I said previously, Rust guarantees memory safety, but it doesn&rsquo;t know whether the data from an FFI is safe or not. So, we&rsquo;re supposed to use <code>unsafe</code> to tell Rust that everything outside this <code>unsafe { }</code> block is <em>truly</em> safe indeed, and that it should kindly lower its safety measures a little bit, so that the <em>unsafe</em> data jumps inside<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>The arguments indicate an array as a whole (which is understandable). <code>*const c_char</code> is a string in C, and so <code>*const *const c_char</code> is a pointer to an array of string of length <code>size_t</code>, from which the data is extracted into a Rust-type slice using <code>from_raw_parts</code>.</p>

<p>Now that we&rsquo;ve got a slice of <strong>C-type</strong> strings, we gotta convert them to Rust-type strings - either <code>&amp;str</code> or <code>String</code> (well, I prefer <code>&amp;str</code>). For that, we can do some nice things with the <code>map</code>,</p>

<pre><code class="rust">use std::str;
use std::ffi::CStr;

let mut stuff: Vec&lt;&amp;str&gt; = array.iter()
    .map(|&amp;p| unsafe { CStr::from_ptr(p) })
    .map(|c_string| c_string.to_bytes())
    .map(|byte| str::from_utf8(byte).unwrap())
    .collect();
</code></pre>

<p>We simply iterate through the slice, get the C-type string, convert it to bytes, from which we can then extract our UTF-8 strings<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>Okay, so we have a vector of <code>&amp;str</code>, alright. Now, I do some stuff - in this case, I iterate through the filenames, grab the contents from them, decrypt the bytes, search through them, count the occurrences of a word in those files and collect the values. Then, I should send it back to Python.</p>

<p>Since the counts are just a number (an <code>u8</code>), I just collect them as a <code>String</code>, then <code>connect</code> them, convert the Rust-type <code>String</code> to a <code>CString</code> pointer and send it to python.</p>

<p>In Rust, we now have&hellip;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<pre><code class="rust">use std::mem;
use std::ffi::CString;

pub extern fn get_stuff(array: *const *const c_char, length: size_t) -&gt; *const c_char {
    // our entire operations
    let count_string = occurrences.connect(" ");
    let c_string = CString::new(count_string).unwrap().as_ptr();
    mem::forget(c_string);          // bzzzz... leak, leak, leak...
    c_string
}
</code></pre>

<p>The <code>as_ptr</code> method takes an <em>immutable</em> reference and constructs a <code>CString</code> pointer. Then, I&rsquo;ve used <code>mem::forget</code> because <code>c_string</code> is owned by Rust. Even if we transfer the pointer, we can&rsquo;t be sure if it&rsquo;s been freed on Rust&rsquo;s side. So, we <em>purposely</em> leak the memory so that the FFI code (which, in this case, is Python) now owns the thing, and Rust has left out a pointer!</p>

<p>Or, we could do something else. The nightly version offers an <code>into_ptr</code> method, which consumes the <code>CString</code> without deallocating the memory. So, we could also use that&hellip;</p>

<pre><code class="rust">#![feature(cstr_memory)]        // unstable feature
use std::ffi::CString;

pub extern fn get_stuff(array: *const *const c_char, length: size_t) -&gt; *const c_char {
    // blah blah blah
    let c_string = CString::new(count_string).unwrap().into_ptr();
    c_string
}
</code></pre>

<p>And, I personally think it&rsquo;s better, because there&rsquo;s another <em>unstable</em> method which does the opposite (which we&rsquo;ll be needing soon). If you just wanna stick to the stable version (<em>and</em> avoid memory leaks), then you&rsquo;ve got no other choice, but to wait for a while, so that those methods become stable.</p>

<p>Anyways, let&rsquo;s get back to business. Now, that <code>c_string</code> is sent back to Python as a pointer, Python receives it nicely, gets the string from it and <em>finally</em>, do all the things I desired. Yeah, but life&rsquo;s not that simple. There&rsquo;s a problem here. What happened to the pointer we had just received? It&rsquo;s just there (as a dump!). We can&rsquo;t simply free the pointer in Python (like I said, both Rust &amp; Python have totally different implementations). So, that represents a terrible <a href="https://en.wikipedia.org/wiki/Memory_leak"><strong>memory leak!</strong></a></p>

<p>The leak isn&rsquo;t a big problem for my application (the memory is gonna be flushed out by the OS sometime anyway), but it&rsquo;s still bad to have leaks. A good way is to return the pointer back to Rust, so that it can be freed properly. Only one (unstable) method offers this &ldquo;proper freeing&rdquo; of a pointer - <code>CString::from_ptr</code>, which does the inverse of <code>CString::into_ptr</code> (this is why I suggested using it in the first place).</p>

<p>Now, there&rsquo;s a little addition to the Rust code,</p>

<pre><code class="rust">#![feature(cstr_memory)]        // unstable feature

#[no_mangle]
pub extern fn kill_pointer(p: *const c_char) {
    unsafe { CString::from_ptr(p) };
}
</code></pre>

<p>and my Python code looks like,</p>

<pre><code class="python"># argument types should be mentioned while doing FFI in Python
# forgetting that has caused segfaults for me
lib.get_stuff.argtypes = (ctypes.POINTER(ctypes.c_char_p), ctypes.c_size_t)
lib.get_stuff.restype = ctypes.c_void_p
lib.kill_pointer.argtypes = [ctypes.c_void_p]

# list_to_send = ['blah', 'blah', 'blah']
c_array = (ctypes.c_char_p * len(list_to_send))(*list_to_send)  # send the array
c_pointer = lib.get_stuff(c_array, len(list_to_send))
count_string = ctypes.c_char_p(c_pointer).value     # get the string

lib.kill_pointer(c_pointer)         # send the pointer back for hack &amp; slash!
</code></pre>

<p>In Python, I get the pointer, extract the string from it, and send it back to Rust. So, I (had to) create a function in Rust to just <em>kill</em> this ugly pointer. The <code>CString::from_ptr</code> consumes the pointer and produces a <code>CString</code> for Rust, which then gets deallocated as the scope runs out of life, which means that the obtained <code>CString</code> should get destroyed<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. And, the processes are now memory safe!</p>

<h2>Okay, what are the perks?</h2>

<p>Only one - <em>performance</em>. The decrypting &amp; searching (of ~200 files) took about a minute in Python, whereas Rust did it in ~0.4 seconds!</p>

<p>When I got to see that <em>effect</em>, I decided (almost immediately) to use the Rust-Python FFI for almost all my computation-related works in the future. As an undergrad in aeronautics, I&rsquo;ve got some ugly computations (for which I&rsquo;ve always used proprietary software). Maybe it&rsquo;s time for me to start using open-source and do the works all by myself!</p>

<p><small><strong>Sidenote:</strong> I&rsquo;m still entirely not sure whether this is efficient, or whether this is the proper way to do things in systems programming, so feel free to drop any suggestions. I welcome your <em>criticism</em> happily! Again, thanks to all the Rustaceans at the #rust IRC channel for helping me out whenever I got stuck.</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, it&rsquo;s for that very same <a href="https://github.com/Wafflespeanut/biographer">diary</a> I had talked about. I had to decrypt a lot of files and search through them (which Rust is pretty good at).<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Well, this also means that it&rsquo;s the coder&rsquo;s job to ensure that the code inside the <code>unsafe</code> block is actually safe.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Thanks to <a href="http://stackoverflow.com/a/31075375/2313792">this wonderful answer</a> from a Rustacean at Stackoverflow.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I used <code>as_ptr</code> at first, but <a href="http://stackoverflow.com/a/31083443/2313792">it was suggested</a> that <code>into_ptr</code> serves much better for that purpose (too bad that it&rsquo;s <em>unstable</em>).<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>I had a chat about that in the #rust IRC channel, and some of them suggested that it&rsquo;s the only way, though I don&rsquo;t have a choice&hellip;<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pythonist getting Rusty these days... (Part 1)]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot/"/>
    <updated>2015-07-05T20:39:06+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;ve been playing with Python and JS for a while, getting into systems programming is one of the things I&rsquo;ve always wanted to do. The increased talks about Rust in the IRC (in the previous months), followed by the release of Rust 1.0 gave me a kickstart, which took me into Rust about two weeks back.</p>

<p>I got to see the beauty of Rust (thanks to the <a href="http://doc.rust-lang.org/book/">wonderful book</a>) and I immediately liked it - its syntax, static type system, vast compile-time checking, etc., especially how it tackles the problem of memory safety by introducing a new concept called <strong>ownership</strong> and it does all those without the use of a garbage collector.</p>

<p>Today, I&rsquo;ll try to explain what I liked about Rust. The upcoming ones are reserved for topics like FFI and concurrency, and how I got around some of the worst situations I&rsquo;ve experienced as a newbie who just into the systems programming world.</p>

<!-- more -->


<h2>What I&rsquo;d been doing?</h2>

<p><em>If you&rsquo;re just interested in the code, please feel free to skip this part.</em></p>

<p>It was quite hard for me at first, to understand how Rust worked. So, I decided to translate one of my Python works to Rust - a private diary I had written in Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> about an year back.</p>

<p>As I got to know more and more about Rust, I began to look for ways to make my code more <em>efficient</em>. Honestly, I had to rewrite my entire diary to achieve that. I changed the data structure, the encryption scheme, the options it provided, etc., that one day it got quite big, (~500 lines of code) that I had to shift it to <a href="https://github.com/Wafflespeanut/biographer">a new repository</a>.</p>

<p>I realized that translating the diary is probably a bad idea at this point. Luckily, there was one thing I could offer. My diary supported <em>searching</em> through the encrypted stories. This is where high-level languages suck. So, I decided to integrate Rust into my diary, by writing a library (which can search at lightning speed!). To achieve that, I had two things in mind - <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> and concurrency, which Rust handled quite <em>nicely</em>. That&rsquo;s where my life as a <em>Rustacean</em> began.</p>

<h1>Some things I liked&hellip;</h1>

<p><em>I liked a lot of things when I was making the library for my diary, which I&rsquo;ll elaborate in this post. We&rsquo;ll get into FFI and concurrency in future posts (because I&rsquo;ve got a lot of stuff in those topics).</em></p>

<p>The only thing that resembles C++ is how we call the methods or traits from modules (like <code>std::thread</code>). The <strong>syntax</strong> for all the other things are very different and they&rsquo;re the ones which impressed me at the first place. As an example, let&rsquo;s write a function for Caesar cipher.</p>

<p>In Python, we have this simple (yet amusing) list comprehension,</p>

<pre><code class="python">def shift(text, amount):        # and, we have a 256-keyspace Caesar cipher
    return ''.join([chr((ord(char) + amount) % 256) for char in text])
    # assert shift('hello', 5) == 'mjqqt' and shift('mjqqt', 256-5) == 'hello'
</code></pre>

<p>In the case of Rust, I decided to work with bytes rather than strings (as it seemed inefficient)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Anyways, Rust doesn&rsquo;t support comprehension, but the equivalent version is somewhat nice.</p>

<pre><code class="rust">fn shift(text_bytes: &amp;Vec&lt;u8&gt;, amount: u8) -&gt; Vec&lt;u8&gt; {
    text_bytes.iter() // wrap around the boundary if the sum overflows
        .map(|byte| amount.wrapping_add(*byte))
        .collect() }
// we don't have to say `collect::&lt;Vec&lt;u8&gt;&gt;()` explicitly, thanks to Rust's type inference
</code></pre>

<p>I&rsquo;m just iterating over the bytes, mapping a function over the values using a closure <code>|byte|</code> and finally collect everything into a vector of 8-bit unsigned integers. Notice the absence of <code>;</code> at the end of the expression. Since the function has a return type denoted by <code>-&gt;</code> (which is a <code>Vec&lt;u8&gt;</code> in this case), Rust automatically <em>infers</em> this as the result of the function. Then, there are these types for each argument, which brings me to my next favorite thing - <strong>static type system</strong>.</p>

<p>For every argument in the function, Rust expects me to specify the type of the argument (whether it&rsquo;s a <code>u8</code> or <code>&amp;str</code> or <code>Vec&lt;T&gt;</code>), including the result (if any) of the function. This was a bit annoying, but it clearly tells that the coder has to know what type of things he&rsquo;s playing with. Yeah, there are complicated cases where we can&rsquo;t be entirely sure of the type, but Rust offers an elegant <em>workaround</em>.</p>

<p>Rust does <strong>compile-time checking</strong>, so that it reduces a program&rsquo;s runtime as much as possible. So, we can take advantage of this feature by deliberately introducing an error, so that it <em>shouts</em> the type for us when we try to  compile. Now, let&rsquo;s try adding some <em>nonsense</em> to our function,</p>

<pre><code class="rust">fn shift(text_bytes: &amp;Vec&lt;u8&gt;, amount: u8) -&gt; Vec&lt;u8&gt; {
    text_bytes.iter() // wrap around the boundary if the sum overflows
        .map(|byte| amount.wrapping_add(*byte))
        // .collect()
        .blah() }       // note the `blah`
</code></pre>

<p>Obviously, Rust doesn&rsquo;t compile! Instead, it shows a nice helpful error<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&hellip;</p>

<pre><code>Compiling demo v0.0.1 (file:///home/wafflespeanut/Desktop/demo)
src/lib.rs:104:10: 104:16 error: no method named `blah` found for type
`core::iter::Map&lt;core::slice::Iter&lt;_, u8&gt;, [closure src/lib.rs:102:14: 102:47]&gt;`
in the current scope
src/lib.rs:104         .blah()
                     ^~~~~~
error: aborting due to previous error
Could not compile `demo`.

To learn more, run the command again with --verbose.
</code></pre>

<p>It tells us that the type <code>core::iter::Map&lt;core::slice::Iter&lt;_, u8&gt;, [closure ...]&gt;</code> doesn&rsquo;t implement our <code>blah</code> method (by which it&rsquo;s letting us know about the exact type), and it also points to the exact location where it has occurred (the same goes for warnings, which can come out of camel cases, deprecated APIs, unused variables, etc.). This <em>type-shouting</em> was very helpful for me while working with complicated types, specifically when I&rsquo;m not sure about what type I get at some location.</p>

<p>Apart from those, some things were much similar to (but much more powerful than) Python, that sometimes I felt Rust&rsquo;s style as high-level. For example, we can unpack tuples and iterate over things just like we do in Python,</p>

<pre><code class="python">(x, y, z) = (1, 2, 3)   # sequence unpacking
for i in [3, 5, 7]:     # iterating over a list
    print i
</code></pre>

<p>In Rust, <code>let</code> does the same job, and <code>in</code> works more or less the same (in the sense, that it calls the <code>iter()</code> method, just like the <code>iter()</code> in Python). But, you can&rsquo;t search with the <code>in</code> like you do in Python, though. <em>Meh, how much more can you expect from a systems language?</em></p>

<pre><code class="rust">let (mut x, y, z) = (1, 2, 3);  // same unpacking
for i in &amp;[3, 5, 7] {           // iterating directly over a slice
    println!("{:?}", i); }
</code></pre>

<p>Now, there&rsquo;s a <code>mut</code> in <code>x</code>, and you can also notice the <code>&amp;</code> operator in the slice, which brings us to the ultimate weapons of Rust - <strong>mutability</strong> and <strong>ownership</strong>. These are the things that allow Rust to guarantee memory safety<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. By default, variable bindings are <em>immutable</em> in Rust. In order to modify the binding in any way, you should specify it as <code>mut</code>, so that the binding becomes mutable, or else you can&rsquo;t change its value.</p>

<p>Regarding ownership, the concept is that the scope in which a variable is born is its owner. But, unlike other languages, we can transfer the ownership of a scope, so that even the scope (who was once the owner) can no longer access the variable once it&rsquo;s been <em>moved</em>. Here&rsquo;s an example,</p>

<pre><code class="rust">fn own(some: Vec&lt;u8&gt;) { }

fn main() {
    let (x, y) = (vec![1, 2, 3], vec![1, 2, 3]);
    let take = x;       // `take` is the owner of `x`
    own(y);             // `own` function is the owner of `y`
    println!("{:?}", (x, y));   // `println!` can't access both, and we get an error
}
</code></pre>

<p>I&rsquo;ve used a heap-allocated vector here, because string, integers, etc. have the <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> trait implemented in them by default, so that even if you try to move those types, only the ownership of the <code>Copy</code> is transferred and so your types are unaffected.</p>

<p>This is why I&rsquo;ve always proceeded with caution when throwing <em>non-copyable</em> types (like vectors) here and there. I don&rsquo;t <em>move</em> the values unless it&rsquo;s absolutely necessary. Even then, I carry those inside a function, so that I can return some type back and compensate for the previous owner&rsquo;s <em>loss</em>. For example, here&rsquo;s something, which I call a <em>&ldquo;string extractor&rdquo;</em>.</p>

<pre><code class="rust">fn extract(bytes: Vec&lt;u8&gt;) -&gt; String {  // requires a consumable vector, not a reference!
    String::from_utf8(bytes).unwrap() }

let x = vec![97, 98, 99];
// let x = extract(&amp;x);     // doesn't work!
let x = extract(x);         // `String` compensation for the owner who once owned a vector
</code></pre>

<p>The <code>from_utf8</code> method consumes the vector and returns a <code>String</code>. So, I can&rsquo;t do something like taking a pointer to a vector, because (obviously) a pointer is different from a vector, which (like I said) is checked by Rust in compile-time.</p>

<p>In Rust, things work quite differently when it comes to references (which are often called, <strong>&ldquo;borrowing&rdquo;</strong>), and there are two kinds of them. <a href="http://doc.rust-lang.org/book/references-and-borrowing.html#the-rules">Rust has two rules</a> when it comes to borrowing,</p>

<blockquote><p>A variable binding can have only one of the following:</p>

<ul>
<li>a single mutable reference</li>
<li>any number of immutable references</li>
</ul>
</blockquote>

<p>That&rsquo;s the only way we can prevent data races. That being said, we can achieve most of the things using immutable references like <code>&amp;T</code> (where <code>T</code> is some type). I&rsquo;ve used mutable references only when I spawn threads i.e., when things get serious and a lot of threads require mutable references. In such a condition, we can use <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex&lt;T&gt;</code></a> to execute operations safely.</p>

<p>As far as I&rsquo;ve seen, Rust offers various kinds of interesting options to easily get around most of the complex situations. For all the high-level coders out there, if you&rsquo;ve always wanna get into systems programming, then I suggest &ldquo;Rust&rdquo; as a nice start!</p>

<p><small>Thanks to Manish for reviewing this post and thanks to all the <em>Rustaceans</em> who helped me whenever I got into the #rust channel at the IRC. For more, see the <a href="https://www.reddit.com/r/rust/comments/3c7r1l/a_pythonist_getting_rusty_these_days/">discussion about this post</a> on Reddit.</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It <em>was</em> a very basic thing - it just wrote the story into a file, hexes and shifts the ASCII values (my encryption was just a hexed Caesar cipher). That was the state of it <a href="https://github.com/Wafflespeanut/scripts/blob/8850c831c10955b5c32d2710abfbfef916031792/Memorandum/Diary.py">until about a month ago</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Rust strings are valid UTF-8 by default, and so <a href="https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8"><code>from_utf8</code></a> method is likely to throw an error if the bytes are invalid. Also, Rust offers a <a href="https://doc.rust-lang.org/std/io/trait.Read.html">file-reader</a> for reading the contents as bytes. So, I decided to handle everything (including the search) using bytes rather than strings.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Honestly, Rust is also my first language where I felt <em>happy</em> about errors, because I knew (almost immediately) what I should do next to prevent it.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Actually, memory safety won&rsquo;t be a problem in these trivial cases, but it&rsquo;s much more important while handling threads. For instance, you can&rsquo;t allow two threads to write over the same data. One of Rust&rsquo;s prime goals is to eliminate such <a href="https://en.wikipedia.org/wiki/Race_condition">data races</a>. If you&rsquo;re more interested in that, <a href="http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/">Manish explains about it</a> in one of his posts.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
