<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Arrow of Code]]></title>
  <link href="http://wafflespeanut.github.io/atom.xml" rel="self"/>
  <link href="http://wafflespeanut.github.io/"/>
  <updated>2015-07-06T20:18:41+05:30</updated>
  <id>http://wafflespeanut.github.io/</id>
  <author>
    <name><![CDATA[Ravi Shankar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pythonist getting Rusty these days... (Part 1)]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot/"/>
    <updated>2015-07-05T20:39:06+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;ve been playing with Python and JS for a while, getting into systems programming is one of the things I&rsquo;ve always wanted to do. The increased talks about Rust in the IRC (in the previous months), followed by the release of Rust 1.0 gave me a kickstart, which took me into Rust about two weeks back.</p>

<p>I got to see the beauty of Rust (thanks to the <a href="http://doc.rust-lang.org/book/">wonderful book</a>) and I immediately liked it - its syntax, static type system, vast compile-time checking, etc., especially how it tackles the problem of memory safety by introducing a new concept called <strong>ownership</strong> and it does all those without the use of a garbage collector.</p>

<p>Today, I&rsquo;ll try to explain what I liked about Rust. The upcoming ones are reserved for topics like FFI and concurrency, and how I got around some of the worst situations I&rsquo;ve experienced as a newbie who just into the systems programming world.</p>

<!-- more -->


<h2>What I&rsquo;d been doing?</h2>

<p><em>If you&rsquo;re just interested in the code, please feel free to skip this part.</em></p>

<p>It was quite hard for me at first, to understand how Rust worked. So, I decided to translate one of my Python works to Rust - a private diary I&rsquo;d written in Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> about an year back.</p>

<p>As I got to know more and more about Rust, I began to look for ways to make my code more efficient. Honestly, I had to rewrite my entire diary to achieve that. I changed the data structure, the encryption scheme, the options it provided, etc., that one day it got quite big, (~500 lines of code) that I had to shift it to <a href="https://github.com/Wafflespeanut/biographer">a new repository</a>.</p>

<p>I realized that translating the diary is probably a bad idea at this point. Luckily, there was one thing I could offer. My diary supported <em>searching</em> through the encrypted stories. This is where high-level languages suck. So, I decided to integrate Rust into my diary, by writing a library (which can search at lightning speed!). To achieve that, I had two things in mind - <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> and concurrency, which Rust handled quite <em>nicely</em>. That&rsquo;s where my life as a <em>Rustacean</em> began.</p>

<h1>Some things I liked&hellip;</h1>

<p><em>I liked a lot of things when I was making the library for my diary, which I&rsquo;ll elaborate in this post. We&rsquo;ll get into FFI and concurrency in future posts (because I&rsquo;ve got a lot of stuff in those topics).</em></p>

<p>The only thing that resembles C++ is how we call the methods or traits from modules (like <code>std::thread</code>). The <strong>syntax</strong> for all the other things are very different and they&rsquo;re the ones which impressed me at the first place. As an example, let&rsquo;s write a function for Caesar cipher.</p>

<p>In Python, we have this simple (yet amusing) list comprehension,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>        <span class="c"># and, we have a 256-keyspace Caesar cipher</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">((</span><span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="o">+</span> <span class="n">amount</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">text</span><span class="p">])</span>
</span><span class='line'>    <span class="c"># assert shift(&#39;hello&#39;, 5) == &#39;mjqqt&#39; and shift(&#39;mjqqt&#39;, 256-5) == &#39;hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of Rust, I decided to work with bytes rather than strings (as it seemed inefficient)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Anyways, Rust doesn&rsquo;t support comprehension, but the equivalent version is somewhat nice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">shift</span><span class="p">(</span><span class="n">text_bytes</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">amount</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">text_bytes</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span> <span class="c1">// wrap around the boundary if the sum overflows</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="n">amount</span><span class="p">.</span><span class="n">wrapping_add</span><span class="p">(</span><span class="o">*</span><span class="n">byte</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// we don&#39;t have to say `collect::&lt;Vec&lt;u8&gt;&gt;()` explicitly, thanks to Rust&#39;s type inference</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m just iterating over the bytes, mapping a function over the values using a closure <code>|byte|</code> and finally collect everything into a vector of 8-bit unsigned integers. Notice the absence of <code>;</code> at the end of the expression. Since the function has a return type denoted by <code>-&gt;</code> (which is a <code>Vec&lt;u8&gt;</code> in this case), Rust automatically <em>infers</em> this as the result of the function. Then, there are these types for each argument, which brings me to my next favorite thing - <strong>static type system</strong>.</p>

<p>For every argument in the function, Rust expects me to specify the type of the argument (whether it&rsquo;s a <code>u8</code> or <code>&amp;str</code> or <code>Vec&lt;T&gt;</code>), including the result (if any) of the function. This was a bit annoying, but it clearly tells that the coder has to know what type of things he&rsquo;s playing with. Yeah, there are complicated cases where we can&rsquo;t be entirely sure of the type, but Rust offers an elegant <em>workaround</em>.</p>

<p>Rust does <strong>compile-time checking</strong>, so that it reduces a program&rsquo;s runtime as much as possible. So, we can take advantage of this feature by deliberately introducing an error, so that it <em>shouts</em> the type for us when we try to  compile. Now, let&rsquo;s try adding some <em>nonsense</em> to our function,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">shift</span><span class="p">(</span><span class="n">text_bytes</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">amount</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">text_bytes</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span> <span class="c1">// wrap around the boundary if the sum overflows</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="n">amount</span><span class="p">.</span><span class="n">wrapping_add</span><span class="p">(</span><span class="o">*</span><span class="n">byte</span><span class="p">))</span>
</span><span class='line'>        <span class="c1">// .collect::&lt;Vec&lt;u8&gt;&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">blah</span><span class="p">()</span> <span class="p">}</span>       <span class="c1">// note the `blah`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, Rust doesn&rsquo;t compile! Instead, it shows a nice helpful error<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">Compiling</span> <span class="n">demo</span> <span class="n">v0</span><span class="p">.</span><span class="mf">0.1</span> <span class="p">(</span><span class="n">file</span><span class="o">:</span><span class="c-Doc">///home/wafflespeanut/Desktop/demo)</span>
</span><span class='line'><span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">104</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span> <span class="mi">104</span><span class="o">:</span><span class="mi">16</span> <span class="n">error</span><span class="o">:</span> <span class="n">no</span> <span class="n">method</span> <span class="n">named</span> <span class="err">`</span><span class="n">blah</span><span class="err">`</span> <span class="n">found</span> <span class="k">for</span> <span class="k">type</span>
</span><span class='line'><span class="err">`</span><span class="n">core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="nb">Map</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">Iter</span><span class="o">&lt;</span><span class="n">_</span><span class="p">,</span> <span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">[</span><span class="n">closure</span> <span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">102</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span> <span class="mi">102</span><span class="o">:</span><span class="mi">47</span><span class="p">]</span><span class="o">&gt;</span><span class="err">`</span>
</span><span class='line'><span class="k">in</span> <span class="n">the</span> <span class="n">current</span> <span class="n">scope</span>
</span><span class='line'><span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">104</span>         <span class="p">.</span><span class="n">blah</span><span class="p">()</span>
</span><span class='line'>                     <span class="o">^~~~~~</span>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span><span class='line'><span class="n">Could</span> <span class="n">not</span> <span class="n">compile</span> <span class="err">`</span><span class="n">demo</span><span class="err">`</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">learn</span> <span class="n">more</span><span class="p">,</span> <span class="n">run</span> <span class="n">the</span> <span class="n">command</span> <span class="n">again</span> <span class="n">with</span> <span class="o">--</span><span class="n">verbose</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>It tells us that the type <code>core::iter::Map&lt;core::slice::Iter&lt;_, u8&gt;, [closure ...]&gt;</code> doesn&rsquo;t implement our <code>blah</code> method (by which it&rsquo;s letting us know about the exact type), and it also points to the exact location where it has occurred (the same goes for warnings, which can come out of camel cases, deprecated APIs, unused variables, etc.). This <em>type-shouting</em> was very helpful for me while working with complicated types, specifically when I&rsquo;m not sure about what type I get at some location.</p>

<p>Apart from those, some things were much similar to (but much more powerful than) Python, that sometimes I felt Rust&rsquo;s style as high-level. For example, we can unpack tuples and iterate over things just like we do in Python,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>   <span class="c"># sequence unpacking</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]:</span>     <span class="c"># iterating over a list</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Rust, <code>let</code> does the same job, and <code>in</code> works more or less the same (in the sense, that it calls the <code>iter()</code> method, just like the <code>iter()</code> in Python). But, you can&rsquo;t search with the <code>in</code> like you do in Python, though. <em>Meh, how much more can you expect from a systems language?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="k">mut</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1">// same unpacking</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span> <span class="p">{</span>           <span class="c1">// iterating directly over a slice</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, there&rsquo;s a <code>mut</code> in <code>x</code>, and you can also notice the <code>&amp;</code> operator in the slice, which brings us to the ultimate weapons of Rust - <strong>mutability</strong> and <strong>ownership</strong>. These are the things that allow Rust to guarantee memory safety<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. By default, variable bindings are <em>immutable</em> in Rust. In order to modify the binding in any way, you should specify it as <code>mut</code>, so that the binding becomes mutable, or else you can&rsquo;t change its value.</p>

<p>Regarding ownership, the concept is that the scope in which a variable is born is its owner. But, unlike other languages, we can transfer the ownership of a scope, so that even the scope (who was once the owner) can no longer access the variable once it&rsquo;s been <em>moved</em>. Here&rsquo;s an example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">own</span><span class="p">(</span><span class="n">some</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">take</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>       <span class="c1">// `take` is the owner of `x`</span>
</span><span class='line'>    <span class="n">own</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>             <span class="c1">// `own` function is the owner of `y`</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>   <span class="c1">// `println!` can&#39;t access both, and we get an error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve used a heap-allocated vector here, because string, integers, etc. have the <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> trait implemented in them by default, so that even if you try to move those types, only the ownership of the <code>Copy</code> is transferred and so your types are unaffected.</p>

<p>This is why I&rsquo;ve always proceeded with caution when throwing <em>non-copyable</em> types (like vectors) here and there. I don&rsquo;t <em>move</em> the values unless it&rsquo;s absolutely necessary. Even then, I carry those inside a function, so that I can return some type back and compensate for the previous owner&rsquo;s <em>loss</em>. For example, here&rsquo;s something, which I call a <em>&ldquo;string extractor&rdquo;</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">extract</span><span class="p">(</span><span class="n">bytes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>  <span class="c1">// requires a consumable vector, not a reference!</span>
</span><span class='line'>    <span class="n">String</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">bytes</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">97</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">99</span><span class="p">];</span>
</span><span class='line'><span class="c1">// let x = extract(&amp;x);     // doesn&#39;t work!</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>         <span class="c1">// `String` compensation for the owner who once owned a vector</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>from_utf8</code> method consumes the vector and returns a <code>String</code>. So, I can&rsquo;t do something like taking a pointer to a vector, because (obviously) a pointer is different from a vector, which (like I said) is checked by Rust in compile-time.</p>

<p>In Rust, things work quite differently when it comes to references (which are often called, <strong>&ldquo;borrowing&rdquo;</strong>), and there are two kinds of them. <a href="http://doc.rust-lang.org/book/references-and-borrowing.html#the-rules">Rust has two rules</a> when it comes to borrowing,</p>

<blockquote><p>A variable binding can have only one of the following:</p>

<ul>
<li>a single mutable reference</li>
<li>any number of immutable references</li>
</ul>
</blockquote>

<p>That&rsquo;s the only way we can prevent data races. That being said, we can achieve most of the things using immutable references like <code>&amp;T</code> (where <code>T</code> is some type). I&rsquo;ve used mutable references only when I spawn threads i.e., when things get serious and a lot of threads require mutable references. In such a condition, we can use <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex&lt;T&gt;</code></a> to execute operations safely.</p>

<p>As far as I&rsquo;ve seen, Rust offers various kinds of interesting options to easily get around most of the complex situations. For all the high-level coders out there, if you&rsquo;ve always wanna get into systems programming, then I suggest &ldquo;Rust&rdquo; as a nice start!</p>

<p><sup>Thanks to Manish for reviewing this post and thanks to all the <em>Rustaceans</em> who helped me whenever I got into the #rust channel.</sup></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It <em>was</em> a very basic thing - it just wrote the story into a file, hexes and shifts the ASCII values (my encryption was just a hexed Caesar cipher). That was the state of it <a href="https://github.com/Wafflespeanut/scripts/blob/8850c831c10955b5c32d2710abfbfef916031792/Memorandum/Diary.py">until about a month ago</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Rust strings are valid UTF-8 by default, and so <a href="https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8"><code>from_utf8</code></a> method is likely to throw an error if the bytes are invalid. Also, Rust offers a <a href="https://doc.rust-lang.org/std/io/trait.Read.html">file-reader</a> for reading the contents as bytes. So, I decided to handle everything (including the search) with bytes instead of strings.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Honestly, Rust is also my first language where I felt <em>happy</em> about errors, because I knew (almost immediately) what I should do next to prevent it.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Actually, memory safety won&rsquo;t be a problem in these trivial cases, but it&rsquo;s much more important while handling threads. For instance, you can&rsquo;t allow two threads to write over the same data. One of Rust&rsquo;s prime goals is to eliminate such <a href="https://en.wikipedia.org/wiki/Race_condition">data races</a>. If you&rsquo;re more interested in that, <a href="http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/">Manish explains about it</a> in one of his posts.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Blog!]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/06/23/my-new-octopress-blog/"/>
    <updated>2015-06-23T03:52:10+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/06/23/my-new-octopress-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a wordpress blogger for over two years now. My previous blog <a href="https://wafflescrazypeanut.wordpress.com">Arrow of time</a> was actually meant for writing about Physics (among other random stuff). It was a success, and I had a great time writing in my wordpress blog. But nowadays, I&rsquo;m more interested in code (than in Physics) and so, I think it&rsquo;s time to move on.</p>

<!-- more -->


<p><strong>Why this blog?</strong> Because, Wordpress <em>sucks</em> when it comes to code-formatting! (just like many other blog providers). Plus, I&rsquo;ve always wanted to use Github pages for blogging. And, nothing else can beat the beautiful <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a>! So, here I am, with my new Octopress-powered blog, where I&rsquo;ll be writing about my favorite times with code (mostly Python &amp; Rust), which (I hope) will be interesting for everyone.</p>

<p><strong>What about the old blog?</strong> Well, I&rsquo;ll still be using my old blog for posting random stuff though (if I had time).</p>
]]></content>
  </entry>
  
</feed>
