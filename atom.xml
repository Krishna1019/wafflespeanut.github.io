<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Arrow of Code]]></title>
  <link href="http://wafflespeanut.github.io/atom.xml" rel="self"/>
  <link href="http://wafflespeanut.github.io/"/>
  <updated>2015-09-10T20:49:48+05:30</updated>
  <id>http://wafflespeanut.github.io/</id>
  <author>
    <name><![CDATA[Ravi Shankar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[100 shades of green: The journey of a coder...]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/09/07/100-shades-of-green-the-journey-of-a-coder-dot-dot-dot/"/>
    <updated>2015-09-07T18:33:18+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/09/07/100-shades-of-green-the-journey-of-a-coder-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been coding for about a year now. I&rsquo;ve danced with Python <em>(a lot!)</em> and nowadays, I&rsquo;m playing with Rust, although I&rsquo;ve also done some basic C &amp; Javascript. Anyways, I get a lot of questions from my fellow undergrads about how I got into coding in the first place, and yesterday, <a href="https://manishearth.github.io/">Manish</a> gave me the idea to blog about it.</p>

<p>Also, since my commit streak has reached 100 days (with 1k commits), I think now&rsquo;s a great time to share my story with y'all&hellip;</p>

<p><img src="http://wafflespeanut.github.io/images/streak.png" alt="commit streak" /></p>

<p><small>On a side note, this post is intended for those who&rsquo;re about to get involved in the <em>art</em> of coding, though I assure the rest of you that it will be interesting for others as well.</small><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<!-- more -->


<h2>Good ol' days with the computer&hellip;</h2>

<p>When I got my first computer, all I ever wanted to do was play games (well, I still do, but I love other things too). Apart from that, I liked to paint (you know, lines, squares, circles, colors, wheee&hellip;). Though I did encounter C in my school days, I didn&rsquo;t know the purpose of it, because I simply didn&rsquo;t realize the powers of coding. The only thing that attracted me was HTML (4), because it can do some pretty stuff - that way, I realized that with some text I can make colorful things on a computer!</p>

<p>I discovered many things during my high school days, but the only thing that mattered the most was that characters in computers can do more than just coloring - that was the time when I played with matrices and generated prime numbers in C (basic stuff you learn in high-school). That was also the time when I had developed this weird desire to fiddle around the things which are hidden from plain sight. I just don&rsquo;t like it that way.</p>

<p>For instance, take the beautiful &ldquo;Microsoft Windows XP&rdquo; (the OS of my first computer) - the <code>C:\\</code> drive is forbidden by default, and it has a lot of files which are unknown to me. I had a friend who shared my trait of fiddling around with unknown files. Since his father owned an internet cafe, whenever we&rsquo;re lost, or screw up something (or get screwed up by a virus, mostly a worm), we get a solution almost immediately. Later, we take those problems to our school, so that we can screw up the computers in our labs (let&rsquo;s just say that we hated some of our teachers!).</p>

<p>That was the time when I also got interested in the command prompt (which I terribly hate nowadays). As an example, this tiny snippet which recursively walks inside a path and hides the contents was used often by us to drive the teachers and students crazy (for a month!).<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>attrib [path] +h +r +s <span class="n">/s</span> <span class="n">/d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>As a newbie to the internet&hellip;</h2>

<p>It wasn&rsquo;t until college when I got my first laptop along with a <em>pathetic</em> excuse for an internet connection (which I still have). By the end of my fresher year, a great deal of things had happened.</p>

<p>I got into Stack Exchange, <a href="http://wp.me/p3OCmi-D">which had some great impacts on my personality</a> over the years (that&rsquo;s also where I met Manish). At the start, I had the motivation to explore the system, interact with a lot of users, and learn to contribute, but once that became handy, I got bored. Yeah, reading stuff on the internet, participating in a great community is awesome and all, but I needed something more - something that could keep me equipped when I&rsquo;m bored of reading.</p>

<p>I got excited about math and wanted to solve problems - it was right about that time when I discovered <a href="https://projecteuler.net/">Project Euler</a>. It demanded the users to code to solve the problems. I&rsquo;m sure every newbie coder gets interested in those problems, because it demands only the solution for a particular problem, which means you ought to guess an algorithm first (sometimes, it will be the awful bruteforce), try to implement it (when you&rsquo;ll discover more about the language of choice - with the help of <a href="https://stackoverflow.com/">Stackoverflow</a>, of course), get the result and then you can refine the algorithm (unlike SPOJ or Code Chef, which are designed to concentrate more on algorithms and data structures). In those days, I used C.</p>

<p>My sophomore year began with <a href="https://wafflescrazypeanut.wordpress.com">blogging</a> - when I was mostly writing about physics-ish stuff (whatever I got excited about) or my favorite experiences (or ranting about something). At this point, I knew about <em>Mathematica</em> and its glories. Luckily, the Wolfram community had offered plenty of documentation for it, that I was able to learn its basics pretty quickly.</p>

<p>Now, I had no reason to use C for solving the problems, since <em>Mathematica</em> had all the built-in functions available in hand. I used it to generate plots and some simple animations, which I later embedded in my blog posts. One thing led to another and soon, I was making animations for teaching my classmates to visualize things.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>Along the way, I also got fond of a markup language - which affected me so much, that I got addicted to just seeing its <em>beauty</em>. It was the awesome LaTeX! I used to prepare notes for some of my courses with it, just because I felt happier to read all those silly formulas in LaTeX. Once I got to know about its clockworks, I began using <a href="http://lyx.org">LyX</a> and <a href="http://geogebra.org">Geogebra</a> to speed things up.</p>

<h2>Hands on an easy, aesthetic &amp; powerful language&hellip;</h2>

<p>Then, I discovered Github. I didn&rsquo;t understand the point of it at first, and so I assumed it as a &ldquo;dropbox for coders&rdquo; - I never imagined the concept of version-control or open-source. Anyways, the repositories served nicely as a <em>backup place</em> for all my code.</p>

<p>I&rsquo;m a <em>perfectionist</em>, alright? I admire the beauty of things when they&rsquo;re neat, but I often struggle to maintain their clean state as time progresses. Since I realized that LaTeX seemed to consume most of my time, note-taking also came to an end. And, <em>Mathematica</em> (the only language I was currently working with) seemed too abstract, since it hides all the details from my view. Now, I wanted to know how things work behind the cloak, but I also don&rsquo;t wanna fall back to C. <em>(meh)</em></p>

<p>When I was a sophomore, I used to hang out a lot in our physics chatroom, <a href="https://chat.stackexchange.com/rooms/71/the-h-bar">the H-bar</a> and most often, I could hear about Python. When I asked about it, they told me that the scientific community is using Python most of the time (from handling the data to plotting the results), especially because it&rsquo;s easy. <em>&ldquo;Hmm, looks like something I should try out&hellip;&rdquo;</em>, and I got curious just like that.</p>

<p>By then, I somehow got interested in cryptography. After reading about the old <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar</a> &amp; <a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher">Vig√®nere</a> ciphers, I got a desire to create my own cipher (that often happens if you get too <em>excited</em> about cryptography without thinking about the past few decades of research), and that little project of mine consumed my entire vacation at the end of my sophomore year.</p>

<p>On the brighter side, this was the point where an endless discovery was going on. As days passed, I dug deeper and deeper into Python. Some new idea kept popping up every now and then, and I immediately implemented it. Man, I was totally productive! As a free perk, I also translated the code to Javascript (by which I learned some HTML5 and JS along with a bit of CSS). This was also where my life as a coder began&hellip;</p>

<p>The day came soon, when I learned some stuff in public-key cryptography, when I realized about the depths of cryptography, when I had also finally decided to <strong>ditch all my work</strong> because it just seemed too <em>stupid</em> to keep on developing a nonsensical <em>beast</em> which does nothing but consumes more time and memory in the name of a &ldquo;non-conformant pet cipher&rdquo;! I had to <em>move on</em>. By then, I knew some serious stuff in Python (thanks to Stackoverflow which helped me to learn all the way down to its internals), and so I used it to reduce the work in my academic stuff - like grabbing data from the lab machines, minor computations, iterations and plotting (which simply took too much time in Excel - some of my classmates realized that later).</p>

<p>Every time I encountered a problem requiring repetitive steps, I used Python. Since Python can do many things (given the vast amount of packages it has) - I used it to crawl through webpages to download stuff, switched to Python for solving those old Project Euler problems, clean my files (and sometimes, dirty code). Like I said, I&rsquo;m a <em>perfectionist</em>.</p>

<p>After a few months, I got an idea (for another little project!). I often forget what happened every day (which is one of my problems which I had to solve) and so, I wanted something to keep track of my memories. That &ldquo;something&rdquo; was my next project - a diary. Apart from Mozilla, that project was something that consumed a great deal of time, and I&rsquo;ve molded it line by line over the months. Ideas popped up in the same way - <em>&ldquo;Let&rsquo;s have an option for searching!&rdquo;</em>, <em>&ldquo;Authentication per session would be a great idea!&rdquo;</em>, <em>&ldquo;Hmm, wouldn&rsquo;t it be wonderful to have <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29">CBC</a> before shifting?&rdquo;</em>, and I implemented those as and whenever they cropped up in mind.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<h2>Into an awesome community - open-source and beyond&hellip;</h2>

<p>Anyways, that thing had taken some of my time and since I was indulged in it, I never bothered to look into Project Euler, and so my problem-solving days were done (I simply didn&rsquo;t get the mood!). Now, I needed something else - something I&rsquo;ve never tried in my internet lifetime.</p>

<p>Then, I recalled Manish&rsquo;s talks about Mozilla, Rust, etc. He had often told me that Mozilla&rsquo;s one of the most welcoming community to get involved. One of the most important things which Stack Exchange taught me is to <strong>&ldquo;search more before asking questions!&rdquo;</strong> Because, we often get silly questions at the site, where some users don&rsquo;t even bother to put some effort on their questions. The point is that it was pretty hard for me to ask questions (especially when it&rsquo;s a new place). Also, I had never heard of &ldquo;IRC&rdquo;.</p>

<p>I was afraid. The gigantic codebase and the numerous code it contained freaked me out! (as I&rsquo;ve never seen such a giant repository in my life! <em>&ldquo;Millions of lines of code? C'mon, really? Isn&rsquo;t it just a browser?&rdquo;</em>). I never understood the bugs, nor did I know how to patch it (happened just a few months back). Soon, my vacation began, and my sole aim was to get involved in a Mozilla codebase! <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>I got into IRC and discovered that they offer mentors for new users. I got one for myself, who even suggested me a &ldquo;good first bug&rdquo;, which took me some days to finally submit a patch. That also required me to get into Ubuntu and a new DVCS called <em>Mercurial</em>. My first bug explained me how things worked over there. It also came with a perk - I never used Windows from then on! I realized the awesomeness of Ubuntu! <a href="http://wp.me/p3OCmi-uA">That was it</a>, and later bugs became a piece of cake, thanks to those awesome Mozillians.</p>

<p>It was by that time Rust 1.0.0 was released. I&rsquo;ve never played with a low-level language. The release of Rust and its success was my motivation. I got excited about it, and immediately got indulged in it (with the help of the <a href="https://doc.rust-lang.org/">wonderful docs &amp; book</a>. Now, an idea popped up while reading about <a href="https://doc.rust-lang.org/book/rust-inside-other-languages.html">concurrency and FFI</a> in Rust (that was my first time reading about &ldquo;FFI&rdquo;, though I had some idea about concurrency). Anyways, that diary I&rsquo;d written was completely in Python. So, If I could somehow link it through FFI and hand over the searching to Rust (and utilize its concurrency), then I could save a lot of time. And, it did.</p>

<p>This task consumed a whole weekend of mine (but, it was worth it!). Though FFI was hard, I got help from a lot of Rustaceans (mostly at IRC for minor things, or Stackoverflow, when <a href="https://stackoverflow.com/q/31083223/2313792">things went out of hand</a>). I loved Rust so much (just like I loved Python), which is also why I never felt hopeless, and by the end of the day, I <a href="http://wafflespeanut.github.io/blog/2015/07/08/a-pythonist-getting-rusty-these-days-dot-dot-dot-part-2/">got the thing to work!</a> <em>(finally&hellip;)</em></p>

<h2>Coding everyday&hellip;</h2>

<p>There&rsquo;s something that I learned from my journey. Once I got into the art of coding with the help a language, jumping into other languages wasn&rsquo;t a big deal. Moreover, if you get involved in a project (open-source, or something of your own), then you&rsquo;ll more likely learn a great deal of stuff (though that cipher and my diary wasn&rsquo;t much useful, I did learn a hell lot of things while working in them).</p>

<p>Also, since I&rsquo;d gone for a high-level language (Python), I didn&rsquo;t have to worry about the types very much, but I did get into trouble when I tried to get into a low-level <em>beast</em> like Rust. Because, Rust doesn&rsquo;t <em>abstract away</em> many things like Python does, I had to do quite a few tasks by myself! Moreover, Rust&rsquo;s design made my coding pretty challenging, because of its strong static type system and its merciless borrow checker (among other things). <strong>I had to pay the iron price!</strong> (for my choice of a high-level language at the start). But, <a href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot/">I had quite a lot of fun</a> while playing with it.</p>

<p>Nowadays, I&rsquo;m involved in the <a href="https://github.com/servo/servo">Servo browser engine</a>, to learn more about Rust, which gets pretty exciting every day. And, while I&rsquo;m playing with Rust, I&rsquo;ve also got back into C, because firstly, I&rsquo;ve realized the power of these low-level languages in terms of performance (plus, C doesn&rsquo;t have any abstractions at all!), and secondly, I&rsquo;m about to finish my college and industries only know about established languages like C/C++/Java. So, I gotta learn one of those to get a job <em>(sigh)</em>.<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p><small>Thanks to Manish for <em>patiently</em> reviewing this post&hellip;</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If you had grown in my locality (in your childhood), then all you know is that a computer (which you often see in school) is <em>&ldquo;something&rdquo;</em> where you can only type, draw, and play games - nothing more! I&rsquo;m not embarrassed to say that we were never curious!<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Well, we learned that from a virus (and that too because we never believed in the concept of an anti-virus (since everything is just the cause &amp; effect of code). This command is often utilized by a harmless worm which infects pen drives.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It was required for a course, where we draw instantaneous vector diagrams of parts of machines. I had even <a href="https://www.youtube.com/playlist?list=PLpqCCxmTKpa1NBYfoEJlKb8X4fq0Pf6N9">made some (not so boring) videos</a> for the junior undergrads using those animations.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>It&rsquo;s not a great <em>project</em> and all (I created that only to dig deeper into Python, and I have!). And yeah, I do write my story every day (I&rsquo;ve got about a year of stories now). I don&rsquo;t usually spend much time other than just recalling the events, and I just write a paragraph or two (like hints) - to just remind myself that something so nice/worse has happened on that day.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Meanwhile, I <a href="http://wp.me/p3OCmi-ws">got into a hackathon</a>, when I learned a lot of stuff - more JS and some frameworks - especially the MVCs like Django and Angular JS, and I had also figured out how Git worked.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>Well, to be honest with you, based on the things I&rsquo;ve seen so far, I personally feel like C being quite easy, since I&rsquo;ve learned the <em>&ldquo;Rust&rdquo;</em>.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pythonist getting Rusty these days... (Part 2)]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/07/08/a-pythonist-getting-rusty-these-days-dot-dot-dot-part-2/"/>
    <updated>2015-07-08T18:17:58+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/07/08/a-pythonist-getting-rusty-these-days-dot-dot-dot-part-2</id>
    <content type="html"><![CDATA[<p>Last time, I talked about <a href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot">my experience with Rust as a newbie</a>. Today, I&rsquo;ll try to explain the hard time I had with the <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a>. Well, I shouldn&rsquo;t have gone into it, but I needed that for communication with Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>FFI was <em>hard</em>, because I can&rsquo;t quite guess what happens along the way. Errors don&rsquo;t mean much, which means that I can get the results only during runtime (and then figure out whether it&rsquo;s the cake I want or not). Then, there&rsquo;s this <em>interesting</em> problem of memory safety. Rust is specifically designed to be memory safe, but most of the other languages aren&rsquo;t (especially C, and so is its descendant, &ldquo;Python&rdquo;). They both can only speak &ldquo;C&rdquo; in their low level. So, Rust <em>has</em> to speak C if it wants to communicate with Python.</p>

<!-- more -->


<p>This means that there&rsquo;s no sending a list from Python and getting it in Rust. Both have entirely different data structures. And, we don&rsquo;t have to say about Rust - its clockworks are <em>crazier</em> than C or Python. But, thanks to Rust&rsquo;s &ldquo;libc&rdquo; and Python&rsquo;s &ldquo;ctypes&rdquo; libraries, which enable both the languages to communicate in C.</p>

<h1>Establishing the Rust-Python FFI</h1>

<p>My script was a bit <em>cranky</em>. Each time, it has a specific list of files (with MD5-hashed filenames). So, I decided to send the necessary file paths as an array of strings. Things got somewhat complicated here. To send an array, I should create one using the <code>ctypes</code>, grab its address (a pointer) and send it along with its length.</p>

<p>In Rust, I should already have a setup like this&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">libc</span><span class="p">)]</span>       <span class="c1">// the thing is pretty useful, but unstable</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">slice</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">libc</span><span class="o">::</span><span class="p">{</span><span class="n">size_t</span><span class="p">,</span> <span class="n">c_char</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[no_mangle]</span>            <span class="c1">// Please don&#39;t mangle the names, my dear Rust!</span>
</span><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">get_stuff</span><span class="p">(</span><span class="n">array</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span><span class="p">,</span> <span class="n">length</span><span class="o">:</span> <span class="n">size_t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">array</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">slice</span><span class="o">::</span><span class="n">from_raw_parts</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">length</span> <span class="k">as</span> <span class="n">usize</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'>    <span class="c1">// do some stuff with the array</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; so that, I could link it to Python like this,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ctypes</span>
</span><span class='line'>
</span><span class='line'><span class="n">lib</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">cdll</span><span class="o">.</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="s">&quot;test.so&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">list_to_send</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;blah&#39;</span><span class="p">,</span> <span class="s">&#39;blah&#39;</span><span class="p">,</span> <span class="s">&#39;blah&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">get_stuff</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">),</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_size_t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">c_array</span> <span class="o">=</span> <span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_to_send</span><span class="p">))(</span><span class="o">*</span><span class="n">list_to_send</span><span class="p">)</span>  <span class="c"># generate the array</span>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">get_stuff</span><span class="p">(</span><span class="n">c_array</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_to_send</span><span class="p">))</span>   <span class="c"># sending stuff to our Rust library</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s side is pretty much self-explanatory - just take a list, declare the argument types, form an array from the list and send its reference, along with its length. But, there are some interesting things going on at Rust&rsquo;s side. I&rsquo;m sure you&rsquo;re aware of <code>pub extern</code>, which allows a function to be publicly called and especially from &ldquo;C&rdquo;.</p>

<p>Now, there&rsquo;s an <code>unsafe</code>. Like I said previously, Rust guarantees memory safety, but it doesn&rsquo;t know whether the data from an FFI is safe or not. So, we&rsquo;re supposed to use <code>unsafe</code> to tell Rust that everything outside this <code>unsafe { }</code> block is <em>truly</em> safe indeed, and that it should kindly lower its safety measures a little bit, so that the <em>unsafe</em> data jumps inside<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>The arguments indicate an array as a whole (which is understandable). <code>*const c_char</code> is a string in C, and so <code>*const *const c_char</code> is a pointer to an array of string of length <code>size_t</code>, from which the data is extracted into a Rust-type slice using <code>from_raw_parts</code>.</p>

<p>Now that we&rsquo;ve got a slice of <strong>C-type</strong> strings, we gotta convert them to Rust-type strings - either <code>&amp;str</code> or <code>String</code> (well, I prefer <code>&amp;str</code>). For that, we can do some nice things with the <code>map</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="kt">str</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CStr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">stuff</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;&amp;</span><span class="kt">str</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|&amp;</span><span class="n">p</span><span class="o">|</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">CStr</span><span class="o">::</span><span class="n">from_ptr</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">c_string</span><span class="o">|</span> <span class="n">c_string</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="kt">str</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">byte</span><span class="p">).</span><span class="n">unwrap</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">collect</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simply iterate through the slice, get the C-type string, convert it to bytes, from which we can then extract our UTF-8 strings<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<p>Okay, so we have a vector of <code>&amp;str</code>, alright. Now, I do some stuff - in this case, I iterate through the filenames, grab the contents from them, decrypt the bytes, search through them, count the occurrences of a word in those files and collect the values. Then, I should send it back to Python.</p>

<p>Since the counts are just a number (an <code>u8</code>), I just collect them as a <code>String</code>, then <code>connect</code> them, convert the Rust-type <code>String</code> to a <code>CString</code> pointer and send it to python.</p>

<p>In Rust, we now have&hellip;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">get_stuff</span><span class="p">(</span><span class="n">array</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span><span class="p">,</span> <span class="n">length</span><span class="o">:</span> <span class="n">size_t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// our entire operations</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">count_string</span> <span class="o">=</span> <span class="n">occurrences</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">c_string</span> <span class="o">=</span> <span class="n">CString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">count_string</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">raw_ptr</span> <span class="o">=</span> <span class="n">c_string</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">();</span>    <span class="c1">// get the pointer and forget the object</span>
</span><span class='line'>    <span class="n">mem</span><span class="o">::</span><span class="n">forget</span><span class="p">(</span><span class="n">c_string</span><span class="p">);</span>              <span class="c1">// bzzzz... leak, leak, leak...</span>
</span><span class='line'>    <span class="n">raw_ptr</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>as_ptr</code> method takes an <em>immutable</em> reference and constructs a <code>CString</code> object. Then, I&rsquo;ve used <code>mem::forget</code> because the <code>c_string</code> is owned by Rust. Even if we transfer the pointer, we can&rsquo;t be sure if it&rsquo;s been freed on Rust&rsquo;s side. So, we ask Rust to cut it loose, thereby <em>purposely</em> leak the memory, so that the FFI code (which, in this case, is Python) now owns the thing.</p>

<p>Or, we could do something else. The nightly version offers an <code>into_ptr</code> method, which consumes the <code>CString</code> without deallocating the memory. So, we could also use that&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">cstr_memory</span><span class="p">)]</span>        <span class="c1">// unstable feature</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">get_stuff</span><span class="p">(</span><span class="n">array</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span><span class="p">,</span> <span class="n">length</span><span class="o">:</span> <span class="n">size_t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// blah blah blah</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">c_string</span> <span class="o">=</span> <span class="n">CString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">count_string</span><span class="p">).</span><span class="n">unwrap</span><span class="p">().</span><span class="n">into_ptr</span><span class="p">();</span>
</span><span class='line'>    <span class="n">c_string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, I personally think it&rsquo;s better, because there&rsquo;s another <em>unstable</em> method which does the opposite (which we&rsquo;ll be needing soon). If you just wanna stick to the stable version (<em>and</em> avoid memory leaks), then you&rsquo;ve got no other choice, but to wait for a while, so that those methods become stable.</p>

<p>Anyways, let&rsquo;s get back to business. Now, that <code>c_string</code> is sent back to Python as a pointer, Python receives it nicely, gets the string from it and <em>finally</em>, do all the things I desired. Yeah, but life&rsquo;s not that simple. There&rsquo;s a problem here. What happened to the pointer we had just received? It&rsquo;s just there (as a dump!). We can&rsquo;t simply free the pointer in Python (like I said, both Rust &amp; Python have totally different implementations). So, that represents a terrible <a href="https://en.wikipedia.org/wiki/Memory_leak"><strong>memory leak!</strong></a></p>

<p>The leak isn&rsquo;t a big problem for my application (the memory is gonna be flushed out by the OS sometime anyway), but it&rsquo;s still bad to have leaks. A good way is to return the pointer back to Rust, so that it can be freed properly. Only one (unstable) method offers this &ldquo;proper freeing&rdquo; of a pointer - <code>CString::from_ptr</code>, which does the inverse of <code>CString::into_ptr</code> (this is why I suggested using it in the first place).</p>

<p>Now, there&rsquo;s a little addition to the Rust code,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">cstr_memory</span><span class="p">)]</span>        <span class="c1">// unstable feature</span>
</span><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ffi</span><span class="o">::</span><span class="n">CString</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[no_mangle]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">kill_pointer</span><span class="p">(</span><span class="n">p</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="n">c_char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">unsafe</span> <span class="p">{</span> <span class="n">CString</span><span class="o">::</span><span class="n">from_ptr</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and my final Python code looks like this,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">ctypes</span>
</span><span class='line'>
</span><span class='line'><span class="n">lib</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">cdll</span><span class="o">.</span><span class="n">LoadLibrary</span><span class="p">(</span><span class="s">&quot;test.so&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">list_to_send</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;blah&#39;</span><span class="p">,</span> <span class="s">&#39;blah&#39;</span><span class="p">,</span> <span class="s">&#39;blah&#39;</span><span class="p">]</span>
</span><span class='line'><span class="c"># argument types should be mentioned while doing FFI in Python</span>
</span><span class='line'><span class="c"># forgetting that has caused segfaults for me</span>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">get_stuff</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">POINTER</span><span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">),</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_size_t</span><span class="p">)</span>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">get_stuff</span><span class="o">.</span><span class="n">restype</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_void_p</span>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">kill_pointer</span><span class="o">.</span><span class="n">argtypes</span> <span class="o">=</span> <span class="p">[</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_void_p</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">c_array</span> <span class="o">=</span> <span class="p">(</span><span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_to_send</span><span class="p">))(</span><span class="o">*</span><span class="n">list_to_send</span><span class="p">)</span>  <span class="c"># generate the array</span>
</span><span class='line'><span class="c"># send the stuff to Rust library and get the pointer</span>
</span><span class='line'><span class="n">c_pointer</span> <span class="o">=</span> <span class="n">lib</span><span class="o">.</span><span class="n">get_stuff</span><span class="p">(</span><span class="n">c_array</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_to_send</span><span class="p">))</span>
</span><span class='line'><span class="n">count_string</span> <span class="o">=</span> <span class="n">ctypes</span><span class="o">.</span><span class="n">c_char_p</span><span class="p">(</span><span class="n">c_pointer</span><span class="p">)</span><span class="o">.</span><span class="n">value</span>     <span class="c"># get the string</span>
</span><span class='line'>
</span><span class='line'><span class="n">lib</span><span class="o">.</span><span class="n">kill_pointer</span><span class="p">(</span><span class="n">c_pointer</span><span class="p">)</span>     <span class="c"># send the pointer back for hack &amp; slash!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, I get the pointer, extract the string from it, and send it back to Rust. So, I (had to) create a function in Rust to just <em>kill</em> this ugly pointer. The <code>CString::from_ptr</code> consumes the pointer and produces a <code>CString</code> for Rust, which then gets deallocated as the scope runs out of life, which means that the obtained <code>CString</code> should get destroyed<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. And, the processes are now memory safe!</p>

<h2>So much for the FFI. What are the perks?</h2>

<p>Only one - <em>performance</em>. The decrypting &amp; searching (of ~200 files) took about a minute in Python, whereas Rust did it in ~0.4 seconds!</p>

<p>When I got to see that <em>effect</em>, I decided (almost immediately) to use the Rust-Python FFI for almost all my computation-related works in the future. As an undergrad in aeronautics, I&rsquo;ve got some ugly computations (for which I&rsquo;ve always used proprietary software). Maybe it&rsquo;s time for me to start using open-source and do the works all by myself!</p>

<p><small><strong>Sidenote:</strong> I&rsquo;m still entirely not sure whether this is efficient, or whether this is the proper way to do things in systems programming, so feel free to drop any suggestions. I welcome your <em>criticism</em> happily! Again, thanks to all the Rustaceans at the #rust IRC channel for helping me out whenever I got stuck.</small></p>

<p><small>You can also check out the discussion on <a href="https://news.ycombinator.com/item?id=9853688">HN</a> and <a href="https://www.reddit.com/r/rust/comments/3ckv6z/a_pythonist_getting_rusty_these_days_part_2/">Reddit</a>.</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, it&rsquo;s for that very same <a href="https://github.com/Wafflespeanut/biographer">diary</a> I had talked about. I had to decrypt a lot of files and search through them (which Rust is pretty good at).<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Well, this also means that it&rsquo;s the coder&rsquo;s job to ensure that the code inside the <code>unsafe</code> block is actually safe.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Thanks to <a href="http://stackoverflow.com/a/31075375/2313792">this wonderful answer</a> from a Rustacean at Stackoverflow.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I used <code>as_ptr</code> at first, but <a href="http://stackoverflow.com/a/31083443/2313792">it was suggested</a> that <code>into_ptr</code> serves much better for that purpose (too bad that it&rsquo;s <em>unstable</em>).<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>I had a chat about that in the #rust IRC channel, and some of them suggested that it&rsquo;s the only way, though I don&rsquo;t have a choice&hellip;<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Pythonist getting Rusty these days... (Part 1)]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot/"/>
    <updated>2015-07-05T20:39:06+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/07/05/a-pythonist-getting-rusty-these-days-dot</id>
    <content type="html"><![CDATA[<p>Though I&rsquo;ve been playing with Python and JS for a while, getting into systems programming is one of the things I&rsquo;ve always wanted to do. The increased talks about Rust in the IRC (in the previous months), followed by the release of Rust 1.0 gave me a kickstart, which took me into Rust about two weeks back.</p>

<p>I got to see the beauty of Rust (thanks to the <a href="http://doc.rust-lang.org/book/">wonderful book</a>) and I immediately liked it - its syntax, static type system, vast compile-time checking, etc., especially how it tackles the problem of memory safety by introducing a new concept called <strong>ownership</strong> and it does all those without the use of a garbage collector.</p>

<p>Today, I&rsquo;ll try to explain what I liked about Rust. The upcoming ones are reserved for topics like FFI and concurrency, and how I got around some of the worst situations I&rsquo;ve experienced as a newbie who just into the systems programming world.</p>

<!-- more -->


<h2>What I&rsquo;d been doing?</h2>

<p><em>If you&rsquo;re just interested in the code, please feel free to skip this part.</em></p>

<p>It was quite hard for me at first, to understand how Rust worked. So, I decided to translate one of my Python works to Rust - a private diary I had written in Python<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> about an year back.</p>

<p>As I got to know more and more about Rust, I began to look for ways to make my code more <em>efficient</em>. Honestly, I had to rewrite my entire diary to achieve that. I changed the data structure, the encryption scheme, the options it provided, etc., that one day it got quite big, (~500 lines of code) that I had to shift it to <a href="https://github.com/Wafflespeanut/biographer">a new repository</a>.</p>

<p>I realized that translating the diary is probably a bad idea at this point. Luckily, there was one thing I could offer. My diary supported <em>searching</em> through the encrypted stories. This is where high-level languages suck. So, I decided to integrate Rust into my diary, by writing a library (which can search at lightning speed!). To achieve that, I had two things in mind - <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> and concurrency, which Rust handled quite <em>nicely</em>. That&rsquo;s where my life as a <em>Rustacean</em> began.</p>

<h1>Some things I liked&hellip;</h1>

<p><em>I liked a lot of things when I was making the library for my diary, which I&rsquo;ll elaborate in this post. We&rsquo;ll get into FFI and concurrency in future posts (because I&rsquo;ve got a lot of stuff in those topics).</em></p>

<p>The only thing that resembles C++ is how we call the methods or traits from modules (like <code>std::thread</code>). The <strong>syntax</strong> for all the other things are very different and they&rsquo;re the ones which impressed me at the first place. As an example, let&rsquo;s write a function for Caesar cipher.</p>

<p>In Python, we have this simple (yet amusing) list comprehension,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>        <span class="c"># and, we have a 256-keyspace Caesar cipher</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">((</span><span class="nb">ord</span><span class="p">(</span><span class="n">char</span><span class="p">)</span> <span class="o">+</span> <span class="n">amount</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">text</span><span class="p">])</span>
</span><span class='line'>    <span class="c"># assert shift(&#39;hello&#39;, 5) == &#39;mjqqt&#39; and shift(&#39;mjqqt&#39;, 256-5) == &#39;hello&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of Rust, I decided to work with bytes rather than strings (as it seemed inefficient)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Anyways, Rust doesn&rsquo;t support comprehension, but the equivalent version is somewhat nice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">shift</span><span class="p">(</span><span class="n">text_bytes</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">amount</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">text_bytes</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span> <span class="c1">// wrap around the boundary if the sum overflows</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="n">amount</span><span class="p">.</span><span class="n">wrapping_add</span><span class="p">(</span><span class="o">*</span><span class="n">byte</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">collect</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// we don&#39;t have to say `collect::&lt;Vec&lt;u8&gt;&gt;()` explicitly, thanks to Rust&#39;s type inference</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m just iterating over the bytes, mapping a function over the values using a closure <code>|byte|</code> and finally collect everything into a vector of 8-bit unsigned integers. Notice the absence of <code>;</code> at the end of the expression. Since the function has a return type denoted by <code>-&gt;</code> (which is a <code>Vec&lt;u8&gt;</code> in this case), Rust automatically <em>infers</em> this as the result of the function. Then, there are these types for each argument, which brings me to my next favorite thing - <strong>static type system</strong>.</p>

<p>For every argument in the function, Rust expects me to specify the type of the argument (whether it&rsquo;s a <code>u8</code> or <code>&amp;str</code> or <code>Vec&lt;T&gt;</code>), including the result (if any) of the function. This was a bit annoying, but it clearly tells that the coder has to know what type of things he&rsquo;s playing with. Yeah, there are complicated cases where we can&rsquo;t be entirely sure of the type, but Rust offers an elegant <em>workaround</em>.</p>

<p>Rust does <strong>compile-time checking</strong>, so that it reduces a program&rsquo;s runtime as much as possible. So, we can take advantage of this feature by deliberately introducing an error, so that it <em>shouts</em> the type for us when we try to  compile. Now, let&rsquo;s try adding some <em>nonsense</em> to our function,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">shift</span><span class="p">(</span><span class="n">text_bytes</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">amount</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">text_bytes</span><span class="p">.</span><span class="n">iter</span><span class="p">()</span> <span class="c1">// wrap around the boundary if the sum overflows</span>
</span><span class='line'>        <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">byte</span><span class="o">|</span> <span class="n">amount</span><span class="p">.</span><span class="n">wrapping_add</span><span class="p">(</span><span class="o">*</span><span class="n">byte</span><span class="p">))</span>
</span><span class='line'>        <span class="c1">// .collect()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">blah</span><span class="p">()</span> <span class="p">}</span>       <span class="c1">// note the `blah`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, Rust doesn&rsquo;t compile! Instead, it shows a nice helpful error<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">Compiling</span> <span class="n">demo</span> <span class="n">v0</span><span class="p">.</span><span class="mf">0.1</span> <span class="p">(</span><span class="n">file</span><span class="o">:</span><span class="c-Doc">///home/wafflespeanut/Desktop/demo)</span>
</span><span class='line'><span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">104</span><span class="o">:</span><span class="mi">10</span><span class="o">:</span> <span class="mi">104</span><span class="o">:</span><span class="mi">16</span> <span class="n">error</span><span class="o">:</span> <span class="n">no</span> <span class="n">method</span> <span class="n">named</span> <span class="err">`</span><span class="n">blah</span><span class="err">`</span> <span class="n">found</span> <span class="k">for</span> <span class="k">type</span>
</span><span class='line'><span class="err">`</span><span class="n">core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="nb">Map</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">Iter</span><span class="o">&lt;</span><span class="n">_</span><span class="p">,</span> <span class="kt">u8</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">[</span><span class="n">closure</span> <span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">102</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span> <span class="mi">102</span><span class="o">:</span><span class="mi">47</span><span class="p">]</span><span class="o">&gt;</span><span class="err">`</span>
</span><span class='line'><span class="k">in</span> <span class="n">the</span> <span class="n">current</span> <span class="n">scope</span>
</span><span class='line'><span class="n">src</span><span class="o">/</span><span class="n">lib</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">104</span>         <span class="p">.</span><span class="n">blah</span><span class="p">()</span>
</span><span class='line'>                     <span class="o">^~~~~~</span>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span><span class='line'><span class="n">Could</span> <span class="n">not</span> <span class="n">compile</span> <span class="err">`</span><span class="n">demo</span><span class="err">`</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">To</span> <span class="n">learn</span> <span class="n">more</span><span class="p">,</span> <span class="n">run</span> <span class="n">the</span> <span class="n">command</span> <span class="n">again</span> <span class="n">with</span> <span class="o">--</span><span class="n">verbose</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>It tells us that the type <code>core::iter::Map&lt;core::slice::Iter&lt;_, u8&gt;, [closure ...]&gt;</code> doesn&rsquo;t implement our <code>blah</code> method (by which it&rsquo;s letting us know about the exact type), and it also points to the exact location where it has occurred (the same goes for warnings, which can come out of camel cases, deprecated APIs, unused variables, etc.). This <em>type-shouting</em> was very helpful for me while working with complicated types, specifically when I&rsquo;m not sure about what type I get at some location.</p>

<p>Apart from those, some things were much similar to (but much more powerful than) Python, that sometimes I felt Rust&rsquo;s style as high-level. For example, we can unpack tuples and iterate over things just like we do in Python,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>   <span class="c"># sequence unpacking</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]:</span>     <span class="c"># iterating over a list</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Rust, <code>let</code> does the same job, and <code>in</code> works more or less the same (in the sense, that it calls the <code>iter()</code> method, just like the <code>iter()</code> in Python). But, you can&rsquo;t search with the <code>in</code> like you do in Python, though. <em>Meh, how much more can you expect from a systems language?</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="k">mut</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1">// same unpacking</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="o">&amp;</span><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span> <span class="p">{</span>           <span class="c1">// iterating directly over a slice</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, there&rsquo;s a <code>mut</code> in <code>x</code>, and you can also notice the <code>&amp;</code> operator in the slice, which brings us to the ultimate weapons of Rust - <strong>mutability</strong> and <strong>ownership</strong>. These are the things that allow Rust to guarantee memory safety<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. By default, variable bindings are <em>immutable</em> in Rust. In order to modify the binding in any way, you should specify it as <code>mut</code>, so that the binding becomes mutable, or else you can&rsquo;t change its value.</p>

<p>Regarding ownership, the concept is that the scope in which a variable is born is its owner. But, unlike other languages, we can transfer the ownership of a scope, so that even the scope (who was once the owner) can no longer access the variable once it&rsquo;s been <em>moved</em>. Here&rsquo;s an example,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">own</span><span class="p">(</span><span class="n">some</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">take</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>       <span class="c1">// `take` is the owner of `x`</span>
</span><span class='line'>    <span class="n">own</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>             <span class="c1">// `own` function is the owner of `y`</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>   <span class="c1">// `println!` can&#39;t access both, and we get an error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve used a heap-allocated vector here, because string, integers, etc. have the <a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"><code>Copy</code></a> trait implemented in them by default, so that even if you try to move those types, only the ownership of the <code>Copy</code> is transferred and so your types are unaffected.</p>

<p>This is why I&rsquo;ve always proceeded with caution when throwing <em>non-copyable</em> types (like vectors) here and there. I don&rsquo;t <em>move</em> the values unless it&rsquo;s absolutely necessary. Even then, I carry those inside a function, so that I can return some type back and compensate for the previous owner&rsquo;s <em>loss</em>. For example, here&rsquo;s something, which I call a <em>&ldquo;string extractor&rdquo;</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">extract</span><span class="p">(</span><span class="n">bytes</span><span class="o">:</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>  <span class="c1">// requires a consumable vector, not a reference!</span>
</span><span class='line'>    <span class="n">String</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">bytes</span><span class="p">).</span><span class="n">unwrap</span><span class="p">()</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">97</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">99</span><span class="p">];</span>
</span><span class='line'><span class="c1">// let x = extract(&amp;x);     // doesn&#39;t work!</span>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">extract</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>         <span class="c1">// `String` compensation for the owner who once owned a vector</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>from_utf8</code> method consumes the vector and returns a <code>String</code>. So, I can&rsquo;t do something like taking a pointer to a vector, because (obviously) a pointer is different from a vector, which (like I said) is checked by Rust in compile-time.</p>

<p>In Rust, things work quite differently when it comes to references (which are often called, <strong>&ldquo;borrowing&rdquo;</strong>), and there are two kinds of them. <a href="http://doc.rust-lang.org/book/references-and-borrowing.html#the-rules">Rust has two rules</a> when it comes to borrowing,</p>

<blockquote><p>A variable binding can have only one of the following:</p>

<ul>
<li>a single mutable reference</li>
<li>any number of immutable references</li>
</ul>
</blockquote>

<p>That&rsquo;s the only way we can prevent data races. That being said, we can achieve most of the things using immutable references like <code>&amp;T</code> (where <code>T</code> is some type). I&rsquo;ve used mutable references only when I spawn threads i.e., when things get serious and a lot of threads require mutable references. In such a condition, we can use <a href="https://doc.rust-lang.org/std/sync/struct.Arc.html"><code>Arc&lt;T&gt;</code></a> and <a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html"><code>Mutex&lt;T&gt;</code></a> to execute operations safely.</p>

<p>As far as I&rsquo;ve seen, Rust offers various kinds of interesting options to easily get around most of the complex situations. For all the high-level coders out there, if you&rsquo;ve always wanna get into systems programming, then I suggest &ldquo;Rust&rdquo; as a nice start!</p>

<p><small>Thanks to Manish for reviewing this post and thanks to all the <em>Rustaceans</em> who helped me whenever I got into the #rust channel at the IRC. For more, see the <a href="https://www.reddit.com/r/rust/comments/3c7r1l/a_pythonist_getting_rusty_these_days/">discussion about this post</a> on Reddit.</small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It <em>was</em> a very basic thing - it just wrote the story into a file, hexes and shifts the ASCII values (my encryption was just a hexed Caesar cipher). That was the state of it <a href="https://github.com/Wafflespeanut/scripts/blob/8850c831c10955b5c32d2710abfbfef916031792/Memorandum/Diary.py">until about a month ago</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Rust strings are valid UTF-8 by default, and so <a href="https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8"><code>from_utf8</code></a> method is likely to throw an error if the bytes are invalid. Also, Rust offers a <a href="https://doc.rust-lang.org/std/io/trait.Read.html">file-reader</a> for reading the contents as bytes. So, I decided to handle everything (including the search) using bytes rather than strings.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Honestly, Rust is also my first language where I felt <em>happy</em> about errors, because I knew (almost immediately) what I should do next to prevent it.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Actually, memory safety won&rsquo;t be a problem in these trivial cases, but it&rsquo;s much more important while handling threads. For instance, you can&rsquo;t allow two threads to write over the same data. One of Rust&rsquo;s prime goals is to eliminate such <a href="https://en.wikipedia.org/wiki/Race_condition">data races</a>. If you&rsquo;re more interested in that, <a href="http://manishearth.github.io/blog/2015/05/30/how-rust-achieves-thread-safety/">Manish explains about it</a> in one of his posts.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My New Blog!]]></title>
    <link href="http://wafflespeanut.github.io/blog/2015/06/23/my-new-octopress-blog/"/>
    <updated>2015-06-23T03:52:10+05:30</updated>
    <id>http://wafflespeanut.github.io/blog/2015/06/23/my-new-octopress-blog</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been a wordpress blogger for over two years now. My previous blog <a href="https://wafflescrazypeanut.wordpress.com">Arrow of time</a> was actually meant for writing about Physics (among other random stuff). It was a success, and I had a great time writing in my wordpress blog. But nowadays, I&rsquo;m more interested in code (than in Physics) and so, I think it&rsquo;s time to move on.</p>

<!-- more -->


<p><strong>Why this blog?</strong> Because, Wordpress <em>sucks</em> when it comes to code-formatting! (just like many other blog providers). Plus, I&rsquo;ve always wanted to use Github pages for blogging. And, nothing else can beat the beautiful <a href="https://en.wikipedia.org/wiki/Markdown">markdown</a>! So, here I am, with my new Octopress-powered blog, where I&rsquo;ll be writing about my favorite times with code (mostly Python &amp; Rust), which (I hope) will be interesting for everyone.</p>

<p><strong>What about the old blog?</strong> Well, I&rsquo;ll still be using my old blog for posting random stuff though (if I had time).</p>
]]></content>
  </entry>
  
</feed>
